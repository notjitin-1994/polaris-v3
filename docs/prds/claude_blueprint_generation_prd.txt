# Claude-Powered Learning Blueprint Generation PRD
## Product Requirements Document
**Version:** 1.0  
**Date:** October 1, 2025  
**Status:** Ready for Implementation

---

## Executive Summary

Transform SmartSlate's learning blueprint generation from Ollama-only to a **Claude Sonnet 4-powered system** with advanced visualization capabilities. This enables industry-leading, research-informed blueprints with dynamic JSON schemas, beautiful infographic dashboards, and elegant markdown views, all while maintaining zero-downtime through intelligent fallback mechanisms.

---

## Problem Statement

### Current State
- Blueprints generated solely by local Ollama instance
- Fixed JSON schema limits LLM creativity and output flexibility
- Single visualization view (markdown only)
- No real-time generation status visibility
- Limited logging for debugging generation issues
- No failover when Ollama is unavailable

### Desired State
- **Claude Sonnet 4** (primary) generates comprehensive, high-quality blueprints
- **Claude Opus 4** (fallback) for complex/failed generations
- **Ollama** (emergency fallback) ensures 100% availability
- **Dynamic JSON schema** - LLM defines structure, frontend adapts seamlessly
- **Dual visualization modes**:
  - Industry-leading infographic dashboard with motion graphics
  - Clean, elegant formatted markdown view
- **Comprehensive logging** to `/logs` with filtering and search
- **Real-time status** during generation process
- **Zero data loss** through robust error handling

---

## Goals & Success Metrics

### Primary Goals
1. **Superior Blueprint Quality**: Leverage Claude Sonnet 4's advanced reasoning for contextual, actionable blueprints
2. **Dynamic Flexibility**: Support any JSON structure from LLM without code changes
3. **Beautiful Visualization**: Industry-leading infographic dashboards that showcase data visually
4. **100% Uptime**: Triple-fallback system ensures generation always succeeds
5. **Full Observability**: Complete logging pipeline for debugging and optimization

### Success Metrics
- **Blueprint Quality Score**: >4.5/5.0 user satisfaction (vs. current 3.8/5.0)
- **Generation Time**: <60s average (vs. current ~90s with Ollama)
- **Availability**: 99.9%+ (0% downtime due to model unavailability)
- **Visual Engagement**: 2x longer view time on infographic vs. markdown
- **Error Rate**: <1% generation failures
- **Log Coverage**: 100% of operations logged with structured metadata

---

## System Architecture

### High-Level Flow
```
User completes questionnaires
    ↓
Trigger blueprint generation
    ↓
[Loading UI with real-time status]
    ↓
Try: Claude Sonnet 4 (primary)
    ↓ (if fails)
Fallback: Claude Opus 4 (premium)
    ↓ (if fails)
Emergency: Ollama (local)
    ↓
Validate & normalize JSON response
    ↓
Extract displayType metadata for each section
    ↓
Save to database (blueprint_json + blueprint_markdown + metadata)
    ↓
[Generation complete, redirect to blueprint viewer]
    ↓
User selects view mode: Infographic Dashboard | Markdown Document
    ↓
Frontend dynamically renders sections based on displayType
    ↓
All operations logged to /logs
```

### Component Architecture

#### 1. **Generation Service** (`/frontend/lib/services/`)
- **`blueprintGenerationService.ts`** (NEW)
  - Main orchestrator with triple-fallback logic
  - `generate()`: Entry point for blueprint generation
  - `generateWithClaude()`: Claude API integration
  - `generateWithOllama()`: Ollama fallback
  - `validateAndNormalize()`: Schema validation and normalization

#### 2. **API Layer** (`/frontend/app/api/`)
- **`/api/claude/generate-blueprint/route.ts`** (NEW)
  - Direct Claude API proxy
  - Handles authentication, error responses
  - Token usage tracking
  
- **`/api/blueprints/generate/route.ts`** (ENHANCED)
  - Main generation endpoint
  - Fetches questionnaire answers
  - Orchestrates generation → save flow
  - Returns status and metadata

- **`/api/blueprints/[id]/status/route.ts`** (NEW)
  - Real-time generation status polling
  - Returns: pending | generating | completed | error

#### 3. **Visualization Layer** (`/frontend/components/blueprint/`)
- **`BlueprintViewer.tsx`** (ENHANCED)
  - Toggle between infographic/markdown views
  - Dynamic section routing based on displayType
  
- **`InfographicSection.tsx`** (NEW)
  - Data-driven infographic visualizations
  - Motion graphics with Framer Motion
  - Responsive grid layouts
  
- **`TimelineSection.tsx`** (NEW)
  - Temporal data visualization
  - Interactive timeline with milestones
  
- **`ChartSection.tsx`** (NEW)
  - Dynamic chart rendering (bar, line, pie, radar)
  - Powered by recharts or similar
  
- **`TableSection.tsx`** (NEW)
  - Structured data tables
  - Sortable, filterable columns
  
- **`MarkdownSection.tsx`** (ENHANCED)
  - Rich markdown rendering
  - Syntax highlighting for code blocks

#### 4. **Database Schema** (EXISTING - No changes)
```sql
blueprint_generator:
  - id (UUID, PK)
  - user_id (UUID, FK → auth.users)
  - blueprint_json (JSONB) ← Dynamic structure from LLM
  - blueprint_markdown (TEXT) ← Converted for legacy support
  - static_answers (JSONB)
  - dynamic_answers (JSONB)
  - status (TEXT: draft|generating|completed|error)
  - created_at (TIMESTAMPTZ)
  - updated_at (TIMESTAMPTZ)
```

#### 5. **Logging System** (ENHANCED)
- **`/frontend/lib/logging/`**
  - `logger.ts`: Structured logger with service tagging
  - `logStore.ts`: In-memory + persistent log storage
  - `types.ts`: Log entry schemas

- **`/frontend/app/logs/page.tsx`** (ENHANCED)
  - Add blueprint generation filters
  - Search by blueprintId, model, status
  - Export generation logs for analysis

---

## Detailed Requirements

### FR-1: Claude Sonnet 4 Integration (Primary)
**Priority:** P0 (Critical)

**Requirements:**
- Use `claude-sonnet-4-20250514` as primary model
- Maximum 12,000 output tokens
- Temperature: 0.2 (balanced creativity/consistency)
- System prompt emphasizes instructional design expertise
- User prompt includes full questionnaire context
- Request strict JSON output (no markdown wrappers)
- Timeout: 120s (2 minutes)
- Retries: 2 attempts with exponential backoff

**Prompt Template:**
```
SYSTEM:
You are an expert Learning Experience Designer with deep knowledge of instructional design principles, adult learning theory, and organizational development.

Generate comprehensive, industry-specific learning blueprints that:
- Align with ADDIE, SAM, or agile instructional design models
- Incorporate current L&D best practices (2024-2025)
- Are immediately actionable and implementation-ready
- Include measurable KPIs and assessment strategies
- Consider diverse learning modalities and accessibility

OUTPUT:
- Valid JSON only (no markdown, no preamble)
- Include "displayType" metadata for each section
- displayType options: "infographic", "markdown", "timeline", "table", "chart"
- If using "chart", include "chartConfig" with type (bar/line/pie/radar)
- Be comprehensive yet concise

USER:
Generate a learning blueprint for:
- Organization: {organization}
- Role: {role}
- Industry: {industry}
- Static Answers: {JSON}
- Dynamic Answers: {JSON}

Include these sections with appropriate displayTypes:
1. metadata (always present)
2. executive_summary (displayType: "markdown")
3. learning_objectives (displayType: "infographic")
4. target_audience (displayType: "infographic")
5. instructional_strategy (displayType: "markdown")
6. content_outline (displayType: "timeline")
7. resources (displayType: "table")
8. assessment_strategy (displayType: "infographic")
9. implementation_timeline (displayType: "timeline")
10. risk_mitigation (displayType: "table")
11. success_metrics (displayType: "infographic")
12. sustainability_plan (displayType: "markdown")
```

### FR-2: Claude Opus 4 Fallback
**Priority:** P0 (Critical)

**Requirements:**
- Use `claude-opus-4-20250514` when Sonnet 4 fails
- Same prompts as Sonnet 4
- Higher token limit: 16,000
- Log fallback activation for monitoring
- Track fallback rate (<5% target)

**Fallback Triggers:**
- Claude Sonnet 4 returns 4xx/5xx
- Request timeout (>120s)
- Invalid API key
- Rate limit exceeded
- Network error
- JSON parse failure after 2 retries

### FR-3: Ollama Emergency Fallback
**Priority:** P1 (High)

**Requirements:**
- Activate only when both Claude models fail
- Use existing Ollama client (`/frontend/lib/ollama/client.ts`)
- Model: `qwen3:30b-a3b` (current config)
- Adapted prompts (Ollama doesn't support separate system/user as cleanly)
- Longer timeout: 180s (3 minutes)
- Log emergency fallback for investigation

### FR-4: Dynamic JSON Schema System
**Priority:** P0 (Critical)

**Requirements:**
- Frontend must render **any** JSON structure from LLM
- Each top-level section must have `displayType` metadata
- Supported displayTypes:
  - `infographic`: Visual data dashboard
  - `markdown`: Rich text content
  - `timeline`: Sequential/temporal display
  - `table`: Structured data grid
  - `chart`: Quantitative visualization (with chartConfig)
- If displayType missing, default to `markdown`
- If unknown displayType, log warning and fallback to `markdown`
- Gracefully handle malformed sections (show JSON dump with warning)

**Schema Validation:**
```typescript
interface BlueprintSection {
  displayType: 'infographic' | 'markdown' | 'timeline' | 'table' | 'chart';
  chartConfig?: {
    type: 'bar' | 'line' | 'pie' | 'radar';
    metrics?: string[];
  };
  [key: string]: any; // Allow arbitrary data
}

interface BlueprintJSON {
  metadata: {
    title: string;
    organization: string;
    generated_at: string;
    version: string;
    model: string;
  };
  [sectionKey: string]: BlueprintSection;
}
```

### FR-5: Infographic Dashboard View
**Priority:** P0 (Critical)

**Design Requirements:**
- **Modern, Beautiful, Industry-Leading**
- Motion graphics with Framer Motion
- Responsive grid layouts (1/2/3 columns based on screen size)
- Glass morphism effects for depth
- Smooth transitions between sections
- Interactive elements (hover effects, tooltips)
- Color-coded by importance/status
- Data visualizations (charts, progress bars, gauges)

**Infographic Components:**

1. **Objectives Infographic**
   - Card-based layout (grid)
   - Each objective: numbered badge, title, description
   - Progress bars showing baseline → target
   - Color gradients (primary → secondary)
   - Animated entrance (staggered)

2. **Target Audience Infographic**
   - Demographic pie charts
   - Learning preference distribution (bar chart)
   - Role/department breakdown
   - Icon-based representation

3. **Assessment Strategy Infographic**
   - KPI cards with target metrics
   - Radar chart for evaluation methods
   - Timeline of assessment milestones
   - Color-coded by priority

4. **Success Metrics Infographic**
   - Metric cards with current/target comparison
   - Animated counters
   - Trend indicators (↑↓)
   - Dashboard-style layout

**Animation Examples:**
```typescript
// Staggered card entrance
<motion.div
  initial={{ opacity: 0, y: 20 }}
  animate={{ opacity: 1, y: 0 }}
  transition={{ delay: index * 0.1 }}
>
  <ObjectiveCard {...objective} />
</motion.div>

// Progress bar animation
<motion.div
  className="h-2 bg-gradient-to-r from-primary to-secondary"
  initial={{ width: 0 }}
  animate={{ width: `${progress}%` }}
  transition={{ duration: 1, ease: 'easeOut' }}
/>

// Number counter animation
<motion.span
  initial={{ opacity: 0, scale: 0.8 }}
  animate={{ opacity: 1, scale: 1 }}
  transition={{ duration: 0.5 }}
>
  {value.toLocaleString()}
</motion.span>
```

### FR-6: Markdown Document View
**Priority:** P1 (High)

**Requirements:**
- Clean, elegant, readable formatting
- Use existing markdown renderer (or add `react-markdown`)
- Syntax highlighting for code blocks
- Proper heading hierarchy (h1 → h6)
- Bulleted/numbered lists
- Tables with borders and zebra striping
- Blockquotes for emphasis
- Horizontal rules for section breaks

**Markdown Conversion:**
```typescript
function convertBlueprintToMarkdown(blueprint: BlueprintJSON): string {
  let md = `# ${blueprint.metadata.title}\n\n`;
  md += `**Organization:** ${blueprint.metadata.organization}\n`;
  md += `**Generated:** ${new Date(blueprint.metadata.generated_at).toLocaleDateString()}\n\n`;
  md += `---\n\n`;
  
  // Convert each section
  for (const [key, section] of Object.entries(blueprint)) {
    if (key === 'metadata') continue;
    
    md += `## ${formatSectionTitle(key)}\n\n`;
    md += convertSectionToMarkdown(section);
    md += `\n\n---\n\n`;
  }
  
  return md;
}
```

### FR-7: Real-Time Generation Status
**Priority:** P1 (High)

**Requirements:**
- Update UI during generation (not just loading spinner)
- Status endpoint: `GET /api/blueprints/[id]/status`
- Poll every 2 seconds while generating
- Display:
  - Current step ("Analyzing questionnaire", "Generating content", "Saving blueprint")
  - Estimated time remaining
  - Progress percentage (if available)
  - Current model being used

**Loading UI:**
```tsx
<div className="glass rounded-2xl p-12 text-center">
  <motion.div
    animate={{ rotate: 360 }}
    transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}
  >
    <Sparkles className="w-16 h-16 text-primary mx-auto" />
  </motion.div>
  
  <h2 className="text-title text-foreground mt-6 mb-2">
    Generating Your Learning Blueprint
  </h2>
  
  <p className="text-body text-text-secondary mb-4">
    {currentStep}
  </p>
  
  <div className="max-w-md mx-auto">
    <div className="h-2 bg-surface rounded-full overflow-hidden">
      <motion.div
        className="h-full bg-gradient-to-r from-primary to-secondary"
        animate={{ width: `${progress}%` }}
      />
    </div>
    <p className="text-sm text-text-secondary mt-2">
      {estimatedTime} remaining
    </p>
  </div>
  
  <div className="mt-6 text-xs text-text-disabled">
    Powered by Claude Sonnet 4
  </div>
</div>
```

### FR-8: Data Persistence
**Priority:** P0 (Critical)

**Save Blueprint:**
```sql
UPDATE blueprint_generator
SET 
  blueprint_json = $1,  -- Dynamic JSON from LLM
  blueprint_markdown = $2,  -- Converted markdown
  status = 'completed',
  updated_at = now()
WHERE id = $3 AND user_id = $4
```

**Blueprint JSON Structure:**
```json
{
  "metadata": { ... },
  "executive_summary": { "content": "...", "displayType": "markdown" },
  "learning_objectives": { "objectives": [...], "displayType": "infographic" },
  "_generation_metadata": {
    "model": "claude-sonnet-4",
    "duration": 45000,
    "timestamp": "2025-10-01T12:00:00Z",
    "fallbackUsed": false
  }
}
```

**Error States:**
- If generation fails after all fallbacks, set `status = 'error'`
- Store partial blueprint + error message in `blueprint_json`
- Allow user to retry generation

### FR-9: Logging System Integration
**Priority:** P1 (High)

**Log Entry Schema:**
```typescript
interface LogEntry {
  id: string;
  timestamp: string;
  level: 'debug' | 'info' | 'warn' | 'error';
  service: 'blueprint-generation' | 'api' | 'ui';
  event: string;
  userId?: string;
  blueprintId?: string;
  metadata: {
    duration?: number;
    model?: string;
    error?: string;
    tokenUsage?: {
      input: number;
      output: number;
    };
  };
}
```

**Log Events:**
- `blueprint.generation.started`
- `blueprint.generation.success`
- `blueprint.generation.failed`
- `blueprint.claude.sonnet.request`
- `blueprint.claude.sonnet.success`
- `blueprint.claude.sonnet.failed`
- `blueprint.claude.opus.fallback`
- `blueprint.claude.opus.success`
- `blueprint.ollama.emergency_fallback`
- `blueprint.ollama.success`
- `blueprint.validation.display_type_missing`
- `blueprint.validation.unknown_display_type`
- `blueprint.save.success`
- `blueprint.save.failed`
- `blueprint.render.section_error`

**Logs Page Enhancement:**
- Add "Blueprint Generation" filter category
- Search by blueprintId
- Filter by model (sonnet/opus/ollama)
- Show generation metrics (avg duration, success rate)
- Export generation logs to CSV

---

## Technical Specifications

### Environment Variables
```bash
# Claude/Anthropic (already configured in smartslate-polaris)
ANTHROPIC_API_KEY=<key>
ANTHROPIC_BASE_URL=https://api.anthropic.com
ANTHROPIC_VERSION=2023-06-01
ANTHROPIC_MODEL=claude-sonnet-4-20250514
ANTHROPIC_MAX_TOKENS=12000

# Ollama (already configured)
OLLAMA_BASE_URL=http://localhost:11434/api
OLLAMA_MODEL=qwen3:30b-a3b
```

### API Endpoints

**POST `/api/blueprints/generate`**
```typescript
Request: {
  blueprintId: string;
}

Response: {
  success: boolean;
  blueprintId: string;
  metadata: {
    model: 'claude-sonnet-4' | 'claude-opus-4' | 'ollama';
    duration: number;
    timestamp: string;
    fallbackUsed: boolean;
  };
  error?: string;
}
```

**GET `/api/blueprints/[id]/status`**
```typescript
Response: {
  status: 'draft' | 'generating' | 'completed' | 'error';
  currentStep?: string;
  progress?: number;
  estimatedTime?: number;
  model?: string;
}
```

**POST `/api/claude/generate-blueprint`**
```typescript
Request: {
  model: string;
  systemPrompt: string;
  userPrompt: string;
  blueprintId: string;
}

Response: {
  success: boolean;
  blueprint: BlueprintJSON;
  usage: {
    input_tokens: number;
    output_tokens: number;
  };
}
```

---

## Error Handling

### Error Scenarios & Recovery

| Scenario | Recovery Strategy |
|----------|------------------|
| Claude Sonnet 4 timeout | Retry once, then fallback to Opus 4 |
| Claude Opus 4 failure | Fallback to Ollama |
| Ollama unavailable | Show error, allow retry later |
| Invalid JSON from LLM | Parse error → retry with "strict JSON" reminder |
| Missing displayType | Default to "markdown", log warning |
| Unknown displayType | Fallback to "markdown", notify admin |
| Database save failure | Queue for retry, cache locally |
| Network error | Retry with exponential backoff (3 attempts) |

### User-Facing Errors
```typescript
const errorMessages = {
  generation_failed: "Blueprint generation failed after trying multiple models. Please try again.",
  timeout: "Generation is taking longer than expected. We're still working on it.",
  save_failed: "Blueprint generated but couldn't be saved. We'll retry automatically.",
  unknown_section: "Some blueprint sections couldn't be displayed with full visualizations.",
  no_api_key: "Blueprint generation is unavailable. Please contact support.",
};
```

---

## Testing Requirements

### Unit Tests
- [ ] BlueprintGenerationService: Generate with Claude Sonnet 4
- [ ] BlueprintGenerationService: Fallback to Opus 4
- [ ] BlueprintGenerationService: Fallback to Ollama
- [ ] Schema validation and normalization
- [ ] displayType handling (known, unknown, missing)
- [ ] Section-specific infographic components
- [ ] Markdown conversion logic
- [ ] Logging service integration

### Integration Tests
- [ ] Full generation flow (questionnaires → blueprint → database)
- [ ] Fallback flow (Sonnet fail → Opus → Ollama)
- [ ] Real-time status polling
- [ ] Blueprint viewer rendering (all displayTypes)
- [ ] Logs page filtering and search
- [ ] Database persistence and retrieval
- [ ] Error recovery and retry logic

### E2E Tests
- [ ] Complete user journey: questionnaires → generate → view infographic
- [ ] Switch between infographic and markdown views
- [ ] Handle Claude API outage gracefully
- [ ] Render dynamic JSON schemas not seen before
- [ ] Generation timeout handling
- [ ] Mobile responsiveness of visualizations

### Load Tests
- [ ] 10 concurrent blueprint generations
- [ ] Database save performance under load
- [ ] Log system performance (10,000+ entries)
- [ ] Infographic rendering performance (large datasets)

---

## Security & Privacy

### Data Protection
- All API routes require authentication (`getSession()`)
- RLS policies enforce user_id matching
- Logs scrub sensitive data (API keys, personal details)
- Admin-only access to full logs

### API Key Security
- Environment variables only (never committed)
- Server-side usage only (never exposed to client)
- Rotate immediately if compromised
- Rate limiting on generation endpoints

---

## Migration & Compatibility

### Backward Compatibility
- Existing blueprints (Ollama-generated): **No changes needed**
- New blueprints: Use Claude by default
- Schema: Fully compatible (blueprint_json is flexible JSONB)
- Viewer: Render old and new blueprints identically
- Markdown view: Always available as fallback

### Migration Steps
1. Deploy new API endpoints (feature-flagged if needed)
2. Test with subset of users (beta group)
3. Monitor logs for issues
4. Gradual rollout to 100%
5. Keep Ollama as permanent fallback (no deprecation)

---

## Performance Targets

| Metric | Target | Current (Ollama) |
|--------|--------|------------------|
| Blueprint generation | <60s | ~90s |
| Infographic render | <2s | N/A |
| Markdown render | <1s | ~1.5s |
| Logs page load | <1s | ~1s |
| Database save | <500ms | ~300ms |
| Fallback activation | <5s | N/A |
| API response time | <30s | N/A |

---

## Rollout Plan

### Phase 1: Foundation (Week 1)
- [ ] Implement Claude API integration service
- [ ] Create blueprint generation orchestrator
- [ ] Add fallback logic (Sonnet → Opus → Ollama)
- [ ] Extend logging system for blueprint events
- [ ] Create API endpoints

### Phase 2: Visualization (Week 2)
- [ ] Build infographic section components
- [ ] Implement timeline visualization
- [ ] Create chart/table components
- [ ] Add markdown view enhancements
- [ ] Implement view toggle UI

### Phase 3: Integration (Week 3)
- [ ] Connect generation flow to wizard
- [ ] Add real-time status polling
- [ ] Implement loading states
- [ ] Integrate with database
- [ ] Add error handling

### Phase 4: Testing & Polish (Week 4)
- [ ] Complete test suite
- [ ] Performance optimization
- [ ] Mobile responsive checks
- [ ] Accessibility audit
- [ ] Documentation

### Phase 5: Launch (Week 5)
- [ ] Feature flag rollout
- [ ] Monitor metrics (success rate, duration, fallbacks)
- [ ] Collect user feedback
- [ ] Iterate on visualizations
- [ ] Document best practices

---

## Open Questions

1. **Caching Strategy**: Should we cache blueprints for identical questionnaire answers to save API costs?
2. **Regeneration**: Allow users to regenerate blueprints with different models?
3. **Cost Monitoring**: Track and display Claude API costs per blueprint?
4. **Blueprint Versioning**: Store multiple versions when user regenerates?
5. **Custom Sections**: Allow users to request additional sections?
6. **Export Formats**: PDF export for infographic view?
7. **Collaboration**: Multi-user editing of generated blueprints?
8. **A/B Testing**: Compare Claude vs. Ollama blueprint quality?

---

## Success Criteria

### Launch Readiness
- [ ] 100% test coverage for critical paths
- [ ] <2% error rate in staging
- [ ] Infographics render on all devices
- [ ] Logs accessible and useful
- [ ] Documentation complete
- [ ] Security review passed

### Post-Launch (30 days)
- [ ] >95% Claude Sonnet 4 success rate
- [ ] <3% fallback activation rate
- [ ] Zero data loss incidents
- [ ] User satisfaction >4.5/5.0
- [ ] Performance targets met
- [ ] Infographic view used in >70% of sessions

---

## Appendices

### A. Example Blueprint JSON
```json
{
  "metadata": {
    "title": "Enterprise Sales Training Program",
    "organization": "Acme Corp",
    "role": "Sales Manager",
    "generated_at": "2025-10-01T12:00:00Z",
    "version": "1.0",
    "model": "claude-sonnet-4"
  },
  "executive_summary": {
    "content": "This comprehensive sales training program aims to elevate Acme Corp's sales team performance through targeted skill development, modern methodologies, and data-driven coaching...",
    "displayType": "markdown"
  },
  "learning_objectives": {
    "objectives": [
      {
        "id": "obj1",
        "title": "Increase Deal Closure Rate",
        "description": "Improve sales team's ability to close deals through consultative selling techniques",
        "metric": "Deal Closure Rate",
        "baseline": "32%",
        "target": "50%",
        "due_date": "2025-12-31"
      },
      {
        "id": "obj2",
        "title": "Reduce Sales Cycle Duration",
        "description": "Streamline sales process to accelerate time-to-close",
        "metric": "Average Sales Cycle",
        "baseline": "45 days",
        "target": "30 days",
        "due_date": "2025-12-31"
      }
    ],
    "displayType": "infographic",
    "chartConfig": {
      "type": "radar",
      "metrics": ["baseline", "target"]
    }
  },
  "target_audience": {
    "demographics": {
      "roles": ["Sales Representative", "Account Executive", "Sales Manager"],
      "experience_levels": ["Junior (0-2 years)", "Mid (2-5 years)", "Senior (5+ years)"],
      "department_distribution": [
        {"department": "Inside Sales", "percentage": 60},
        {"department": "Field Sales", "percentage": 30},
        {"department": "Sales Management", "percentage": 10}
      ]
    },
    "learning_preferences": {
      "modalities": [
        {"type": "Visual", "percentage": 30},
        {"type": "Hands-on Practice", "percentage": 50},
        {"type": "Collaborative", "percentage": 20}
      ]
    },
    "displayType": "infographic"
  },
  "content_outline": {
    "modules": [
      {
        "module_id": "m1",
        "title": "Consultative Selling Foundations",
        "description": "Master the fundamentals of consultative selling",
        "topics": ["Needs Analysis", "Active Listening", "Question Frameworks"],
        "duration": "2 weeks",
        "delivery_method": "Blended (online + workshops)",
        "learning_activities": [
          {
            "activity": "Role-play customer discovery calls",
            "type": "Exercise",
            "duration": "45 minutes"
          }
        ],
        "assessment": {
          "type": "Scenario-based simulation",
          "description": "Conduct mock discovery call with feedback"
        }
      }
    ],
    "displayType": "timeline"
  },
  "resources": {
    "human_resources": [
      {"role": "Sales Trainer", "fte": 1.0, "duration": "6 months"},
      {"role": "Content Developer", "fte": 0.5, "duration": "3 months"}
    ],
    "tools_and_platforms": [
      {"category": "LMS", "name": "Salesforce Trailhead", "cost_type": "Subscription"},
      {"category": "Practice Platform", "name": "Gong.io", "cost_type": "License"}
    ],
    "budget": {
      "currency": "USD",
      "items": [
        {"item": "Content Development", "amount": 40000},
        {"item": "Platform Licenses", "amount": 15000},
        {"item": "Trainer Costs", "amount": 60000}
      ],
      "total": 115000
    },
    "displayType": "table"
  },
  "_generation_metadata": {
    "model": "claude-sonnet-4",
    "duration": 52000,
    "timestamp": "2025-10-01T12:00:52Z",
    "fallbackUsed": false,
    "tokenUsage": {
      "input": 3200,
      "output": 8500
    }
  }
}
```

### B. Visualization Type Decision Matrix

| Data Type | Best displayType | Example Sections |
|-----------|-----------------|------------------|
| Narrative text | `markdown` | Executive summary, strategy overview |
| Measurable objectives | `infographic` | Learning objectives, success metrics |
| Sequential events | `timeline` | Implementation timeline, content outline |
| Comparative data | `table` | Resources, budget, risk matrix |
| Quantitative metrics | `chart` | Demographics, assessment weights |
| Mixed content | `markdown` (default) | Any section without clear structure |

---

**Document End**


name: CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint
        
      - name: Check Prettier formatting
        working-directory: ./frontend
        run: npx prettier --check .
        
      - name: Check for gradient violations
        working-directory: ./frontend
        run: |
          echo "Checking for gradient violations..."
          if grep -r "bg-gradient\|from-\|to-\|via-" --include="*.tsx" --include="*.ts" --include="*.jsx" --include="*.js" components app lib; then
            echo "❌ Error: Gradient classes found! Gradients are not allowed per style guide."
            echo "Please use solid colors or glass effects instead."
            exit 1
          else
            echo "✅ No gradient violations found"
          fi
          
      - name: Check for inline styles
        working-directory: ./frontend
        run: |
          echo "Checking for inline style violations..."
          # Allow filter style for glass effects, but flag other inline styles
          if grep -r 'style={{' --include="*.tsx" --include="*.jsx" components app | grep -v "filter:" | grep -v "// Exception:" | grep -v "{/* Exception:"; then
            echo "⚠️  Warning: Inline styles found. Consider using Tailwind utility classes instead."
            echo "If these are necessary for dynamic values, please document with a comment."
          else
            echo "✅ No problematic inline styles found"
          fi

  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run TypeScript check
        working-directory: ./frontend
        run: npm run typecheck

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run tests
        working-directory: ./frontend
        run: npm test
        env:
          CI: true

  build:
    name: Build Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build application
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}
